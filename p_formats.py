from utils import *
# 書式: 名前, 長さ(バッファ使用時は0), 追加表示在りか?, データ記憶が必要か?, 追加表示フォーマット, データ位置, データ記憶フォーマット
arp = (('HTYPE', 16, True, False, lambda x: 'ETHERNET' if x == '0001' else 'None'),
       ('PTYPE', 16, True, False, lambda x: 'IPv4' if int(x, 16) >= 0x800 else 'None'),
       ('HADDR LEN', 8, True, True, lambda x: (str(int(x, 16)) + ' byte(s)')),
       ('ADDR LEN', 8, True, True, lambda x: (str(int(x, 16)) + ' byte(s)')),
       ('OPER', 16, True, False, lambda x: 'REQUEST' if x =='0001' else 'REPLY' if x == '0002' else 'None'),
       ('S HADDR', 0, True, False, lambda x: haddrTrim(x), lambda x: int(x[1], 16) * 2),
       ('S ADDR', 0, True, False, lambda x: addrTrim(x), lambda x: int(x[2], 16) * 2),
       ('D HADDR', 0, True, False, lambda x: haddrTrim(x), lambda x: int(x[1], 16) * 2),
       ('D ADDR', 0, True, False, lambda x: addrTrim(x), lambda x: int(x[2], 16) * 2))
ipv4 = (('VER', 4, False, False),
        ('HLEN', 4, True, True, lambda x: str(int(x, 16)) + 'line(s)'),
        ('TOS', 8, False, False),
        ('PLEN', 16, True, True, lambda x: str(int(x, 16)) + 'byte(s)'),
        ('ID', 16, False, False),
        (None, 1, False, False),
        ('DF', 1, False, False),
        ('MF', 1, False, False),
        ('FO', 13, False, False),
        ('TTL', 8, False, False),
        ('PROTO', 8, True, True, lambda x: 'ICMP' if x =='01' else 'TCP' if x == '06' else 'UDP' if x == '11' else 'None'),
        ('CKSUM', 16, False, False),
        ('S ADDR', 32, True, False, lambda x: addrTrim(x)),
        ('D ADDR', 32, True, False, lambda x: addrTrim(x)),
        ('OPTION', 0, False, False, None, lambda x: (int(x[1], 16) - 5) * 8),
        ('DATA', 0, False, True, None, lambda x: (int(x[2], 16) - int(x[1], 16) * 4) * 2))
icmp = (('TYPE', 8, True, False, lambda x: 'ECHO MESSAGE' if x =='00' else 'ECHO REPLY MESSAGE' if x == '08' else 'None'),
        ('CODE', 8, False, False),
        ('CHKSUM', 16, False, False),
        ('ID', 16, False, False),
        ('ICMP_SEQ', 16, False, False),
        ('DATA', 0, False, True, None, lambda x: len(x[0]) - 8))
icmp_dum = (('TYPE', 8, True, False, lambda x: 'Destination Unreachable Message' if x =='03' else 'None'),
            ('CODE', 8, True, False, lambda x: 'Network unreachable error' if x == '00' else 'Host unreachable error' if x == '01' else 'None'),
            ('CHKSUM', 16, False, False),
            (None, 8, False, False),
            ('LEN', 8, False, False),
            ('NEXT_MPU', 16, False, False),
            ('DATA', 0, False, True, None, lambda x: len(x[0]) - 8))
udp = (('SPORT', 16, True, True, lambda x: 'UDP/'+ str(int(x, 16)) + ': ' + checkPort(int(x, 16), UDP_PORT)),
       ('DPORT', 16, True, True, lambda x: 'UDP/'+ str(int(x, 16)) + ': ' + checkPort(int(x, 16), UDP_PORT)),
       ('DLEN', 16, True, True, lambda x: (str(int(x, 16)) + ' byte(s)')),
       ('CKSUM', 16, False, False),
       ('DATA', 0, False, True, None, lambda x: int(x[3], 16) * 2))
UDP_PORT = {53: 'Domain Name System (DNS)',
            67: 'Dynamic Host Configuration Protocol (DHCP) server',
            68: 'Dynamic Host Configuration Protocol (DHCP) client',
            123: 'Network Time Protocol (NTP)',
            137: 'NetBIOS Name Service',
            '1023': 'Well-known port',
            '49151': 'Registered port',
            '65536': 'Dynamic, private or ephemeral ports'}
dns = (('ID', 16, False, False),
       ('QR', 1, True, False, lambda x: 'QUERY' if x =='0' else 'RESPONSE' if x == '1' else 'None'),
       ('OPcode', 4, True, False, lambda x: 'STANDARD QUERY' if x =='0000' else 'INVERSE' if x == '0001' else 'SERVER STATUS REQUEST' if x == '0010' else'None'),
       ('AA', 1, True, False, lambda x: 'NON-AUTHORITATIVE' if x =='0' else 'AUTHORITATIVE' if x == '1' else 'None'),
       ('TC', 1, True, False, lambda x: 'Message is not truncated' if x =='0' else 'Message truncated' if x == '1' else 'None'),
       ('RD', 1, False, False),
       ('RA', 1, False, False),
       (None, 3, False, False),
       ('Rcode', 4, True, False, lambda x: 'NoError' if x =='0' else 'FormErr' if x == '1' else 'ServFail' if x == '2' else 'None'),
       ('QUERY COUNT', 16, False, True),
       ('ANSWER COUNT', 16, False, True),
       ('AUTHORICITY COUNT', 16, False, True),
       ('ADDITIONAL COUNT', 16, False, True),
       ('QUERY RECORDS:\n  QNAME', 0, True, False, lambda x: dns_decode(x), lambda x: dns_urllen(x[0][24:])),
       ('  QTYPE', 16, False, False),
       ('  QCLASS', 16, False, False))
tcp = (('SPORT', 16, True, True, lambda x: 'TCP/'+ str(int(x, 16)) + ': ' + checkPort(int(x, 16), TCP_PORT)),
       ('DPORT', 16, True, True, lambda x: 'TCP/'+ str(int(x, 16)) + ': ' + checkPort(int(x, 16), TCP_PORT)),
       ('SEQ_NUM', 32, False, False),
       ('ACK_NUM', 32, False, False),
       ('HLEN', 4, True, True, lambda x: (str(int(x, 16)) + ' line(s)')),
       (None, 3, False, False),
       ('NS', 1, False, False),
       ('CWR', 1, False, False),
       ('ECE', 1, False, False),
       ('URG', 1, False, False),
       ('ACK', 1, False, False),
       ('PSH', 1, False, False),
       ('RST', 1, False, False),
       ('SYN', 1, False, False),
       ('FIN', 1, False, False),
       ('CWND', 16, False, False),
       ('CKSUM', 16, False, False),
       ('URG_POINTER', 16, False, False),
       ('OPTION', 0, False, False, None, lambda x: (int(x[3], 16) - 5) * 8),
       ('DATA', 0, False, True, None, lambda x: len(x[0]) - int(x[3], 16) * 8))
TCP_PORT = {20: 'File Transfer Protocol (FTP) data transfer',
            21: 'File Transfer Protocol (FTP) control',
            22: 'Secure Shell (SSH)',
            23: 'Telnet protocol',
            25: 'Simple Mail Transfer Protocol (SMTP)',
            80: 'Hypertext Transfer Protocol (HTTP)',
            110: 'Post Office Protocol, version 3 (POP3)',
            119: 'Network News Transfer Protocol (NNTP)',
            139: 'NetBIOS Session Service',
            143: 'Internet Message Access Protocol (IMAP)',
            443: 'Hypertext Transfer Protocol over TLS/SSL (HTTPS)',
            '1023': 'Well-known port',
            '49151': 'Registered port',
            '65536': 'Dynamic, private or ephemeral ports'}
telnet = (('DATA', 0, 'split', True, None, lambda x: len(x[0])),)

# 名前，フォーマット，下階層につながるか
mode_list = ({'0806': ('ARP', arp, False), '0800': ('IPv4', ipv4, True)},
            {'01': {'00': ('ICMP', icmp, False), '08': ('ICMP', icmp, False), '03': ('ICMP Destination Unreachable Message', icmp_dum, False)},
             '06': ('TCP', tcp, True), '11': ('UDP', udp, True)},
            {'53': ('DNS', dns, False), '23': ('TELNET', telnet, False)})
