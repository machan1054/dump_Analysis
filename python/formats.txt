########################################################
# Packet Formats on wireshark by Hiroyuki Takada
########################################################

フィールド:	パケットフォーマットの値が入る場所を指す。
側面の|:	固定長フィールド
側面の//:	可変長フィールド
===:		 データ部があるフォーマットのヘッダとデータの区切り
0xffff:		0xで始まる数字は16進法。
フォーマットの1マス：	1ビットに対応する。
#############
ethernet[1]
#############
TCPIP参照モデルの第1層（OSIの第二層、データリンク層）のプロトコルの一つ。

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|
|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
| D HADDR                       |
|                               |
|                               |
+-------------------------------+
| S HADDR                       |
|                               |
|                               |
+-------------------------------+
| Ethertype                     |
|                               |
+===============================+
// DATA                        //
+-------------------------------+

D:	Destination 送信先
S:	Source 送信元
HADDR:	ハードウェアアドレス, Macアドレス
DATA:	上位層プロトコルのフォーマットが入れ子状にはいる。
Ethertype: 上位層プロトコル識別子
Ethertypeの代表的な識別子[2]
0x0800	Internet Protocol version 4 (IPv4)
0x0806	Address Resolution Protocol (ARP)


参考文献
[1] @IT 詳説TCP/IPプロトコル　イーサネットのフレーム構造　http://www.atmarkit.co.jp/ait/articles/0107/05/news001_3.html
[2] Wikipedia Ethertype https://en.wikipedia.org/wiki/EtherType

#####################################
Internet Protocol version 4 (IPv4)[3]
#####################################
TCPIP参照モデル第二層（OSI第三層、ネットワーク層）の代表的なプロトコル

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|1|2|2|2|2|2|2|2|2|2|2|3|3|
|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| VER   | HLEN  | TOS           | PLEN                          | 
+-------+-------+---------------+--+--+--+----------------------+ 
| ID                            |0 |DF|MF| FO                   | 
+---------------+---------------+--+--+--+----------------------+ 
| TTL           | PROTO         | CKSUM                         | 
+---------------+---------------+-------------------------------+
| S ADDR                                                        | 
+---------------------------------------------------------------+
| D ADDR                                                        | 
+---------------------------------------------------------------+ 
// OPTION                                                      // 
+===============================================================+
// DATA                                                        //
+---------------------------------------------------------------+

HLEN:	ヘッダ長（単位は行、１行４バイト）=====までの長さ。必須行は５なのでHLENは最低でも５以上。
PLEN:	ヘッダとデータを含めたIPパケット長（単位はバイト）

TTL:	パケット寿命、ルータを通過する時に、1減る。0になると廃棄され送信元にicmp traceroute によって通知される。
	ループによるパケットゾンビ化防止。
ADDR:	IPアドレス
OPTION:	IPヘッダオプション。
	オプション長は(HLENの値)-5 で行数がでる。
DATA:	上位層プロトコルのフォーマットが入れ子状に入る。
DATA長は(PLENの値)-(HLENの値)*4 で計算できる。
PROTO: 上位層プロトコル識別子
	代表的な識別子[4]
	0x01	ICMP	Internet Control Message Protocol	RFC 792
	0x06	TCP	Transmission Control Protocol	RFC 793
	0x11	UDP	User Datagram Protocol	RFC 768

その他のフィールド
VER:	IPのバージョン
TOS:	パケットの優先度
ID:	パケットのID
DF、MF：パケット分割の有無などのフラグ
FO：	パケット分割（フラグメント）されているときの分割アドレス
CKSUM：	ヘッダが改変されていないかチェックするための値
参考文献
[3] Wikipedia IPv4 https://ja.wikipedia.org/wiki/IPv4
[4] Wikipedia プロトコル番号一覧　https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E7%95%AA%E5%8F%B7%E4%B8%80%E8%A6%A7

#####################################
Address Resolution Protocol (ARP)[5]
#####################################
TCPIP参照モデル第二層のプロトコルの一つ
ARPはMACアドレスとIPアドレスを関連付けるためのプロトコル
一度ARPで取得した対応表はしばらくの間（機器による。windows 2min linux 15min, router 60min）
ARPキャッシュに保持される。
スイッチングハブやレイヤ2スイッチは、ethernetヘッダのみを見てフレームを目的のマックアドレスのある
機器へ転送するので、相手のマックアドレスが必要。

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|1|2|2|2|2|2|2|2|2|2|2|3|3|
|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| HTYPE                                                         | 
+-------+-------------------------------------------------------+ 
| PTYPE                                                         | 
+-------------------------------+-------------------------------+ 
| HADDR LEN                     | ADDR LEN                      | 
+-------------------------------+-------------------------------+
| OPER                                                          | 
+---------------------------------------------------------------+
// S HADDR                                                     // 
+---------------------------------------------------------------+ 
// S ADDR                                                      //
+---------------------------------------------------------------+
// D HADDR                                                     //
+---------------------------------------------------------------+
// D ADDR                                                      //
+---------------------------------------------------------------+

HTYPE:	ハードウェアタイプ　第１層のプロトコル識別子 ethernetのとき0x0001
PTYPE:	プロトコルタイプ　第２層のプロトコル識別子 ipv4のとき0x0800以降の値
HADDR LEN:	ハードウェアアドレス長 MACアドレス長=0x06
ADDR LEN:	IPアドレス長=0x04
OPER:	オペレーション　要求=0x0001 返信=0x0002
	OPER=0x0001 のとき
	S フィールドを送信元PCの設定に基いて埋める。
	D HADDR=0x000000000000
	D ADDR=問い合わせるIPアドレス
	D ADDRが自分の使用しているIPアドレスであるコンピュータはARP応答を返す。
	OPER=0x0002 のとき
	S フィールドを送信元PCの設定に基いて埋める。（問い合わせを受けた方＝応答するPCの情報）
	D フィールドをARPリクエストのSフィールドに基いて埋める。（リクエストしてきたPCに返すため）

参考文献
[5] Wikipedia ARP https://ja.wikipedia.org/wiki/Address_Resolution_Protocol

######################################################
# Internet Control Message Protocol (ICMP)[6] 
######################################################
ICMPはネットワークの状態を問い合わせたり、状態を通知する機能を担う。
ICMP ECHO は指定されたIPアドレスが生きているかどうかを確かめるためのエコー要求と
生きていることを知らせるためのエコー応答がある。

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|1|2|2|2|2|2|2|2|2|2|2|3|3|
|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| TYPE          | CODE=0x00     | CHKSUM                        | 
+---------------+---------------+-------------------------------+ 
| ID                            | ICMP_SEQ                      | 
+-------------------------------+-------------------------------+ 
// DATA                                                        //
+---------------------------------------------------------------+

TYPE:	0x00 のときエコー応答通知、0x80のときエコー要求
CODE:	0x00 で固定
ICMP_SEQ: シーケンス番号
DATA長はIPヘッダのPLEN, HLEN とICMPヘッダの固定部の長さ（８バイト）を元に算出する。

ICMP Destination Unreachable Message の場合

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|1|2|2|2|2|2|2|2|2|2|2|3|3|
|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| TYPE=0x03     | CODE          | CHKSUM                        | 
+---------------+---------------+-------------------------------+ 
| 未使用        | LEN           | NEXT_MTU                      | 
+-------------------------------+-------------------------------+ 
// DATA                                                        //
+---------------------------------------------------------------+

TYPE: 	0x03 で固定
CODE: 	状況に応じて以下の値をとる。
	0x00 ネットワーク到達不能
	0x01 ホスト到達不能
	0x02 プロトコル到達不能
	0x03 ポート到達不能
	コレ以外にもたくさんあるが省略
LEN:	DATA長
DATA:	到達しなかったパケットのIPヘッダ以降のダンプ

NEXT_MTU:	次のネットワークのMTUの値
参考文献
[6] Wikipedia ICMP https://ja.wikipedia.org/wiki/Internet_Control_Message_Protocol

##################################
# User Datagram Protocol (UDP)[7]
##################################
TCPIP参照モデルの第三層のプロトコルの一つ。
音声や動画など高速な転送に適したプロトコル
ほとんどの制御は第四層で実装することを想定しているのでUDPヘッダは簡素的。


+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|1|2|2|2|2|2|2|2|2|2|2|3|3|
|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| SPORT                         | DPORT                         |
+-------------------------------+-------------------------------+
| DLEN	                        | CKSUM                         |
+-------------------------------+-------------------------------+
// DATA                                                        //
+---------------------------------------------------------------+

SPORT:	送信元ポート番号
DPORT:	送信先ポート番号
DLEN:	DATA長

ポート番号は上位層プロトコル識別子である。[8]を参照。
0～1023 よく知られた予約済ポート番号
	TCP/20: FTPデータ（データ転送）　	TCP/21: FTP制御（データ転送）
	TCP/22: SSH（セキュアな遠隔操作）	TCP/23: TELNET（遠隔操作）
	TCP/25: SMTP（メール）			UDP/53: DNS（ドメイン名サービス）
	UDP/67: DHCPサーバ（IP設定の自動化）	UDP/68: DHCPクライアント（IP設定の自動化）
	TCP/80: HTTP（WWWサービス）		TCP/110: POP3（メール吸い上げ）
	TCP/119: NNTP				UDP/123: NTP（時刻合わせ）
	UDP/137,138: NetBIOS（Windowsファイル共有）TCP/139: NetBIOS（Windowsファイル共有）
	TCP/143: IMAP（メール）			TCP/443: HTTPS（セキュアWWW）
1024～49141　予約済ポート番号
	この範囲のポート番号と上位層プロトコルの対応は、
	検索語を「ポート番号　40019」のようにしてググるとわかる。
49142～65535　ユーザが自由に使用できるポート
	SPORTもDPORTもどちらもこの範囲のときは
	上位層プロトコルは特定できない→ UDPdata とするしかない。

参考文献
[7] Wikipedia UDP https://ja.wikipedia.org/wiki/User_Datagram_Protocol
[8] Wikipedia ポート番号　https://ja.wikipedia.org/wiki/%E3%83%9D%E3%83%BC%E3%83%88%E7%95%AA%E5%8F%B7

#########################################
# Transmission Control Protocol (TCP)[9]
#########################################
TCPIP参照モデル第三層のプロトコルの一つ
様々な信頼性保証のための制御ができるプロトコル。
	・パケット分割機能
	・受信確認機能（相手がパケットを受け取ったかどうかを知ることができる）
	・再送重複制御（届いていないパケットを再送する。同一内容の重複パケットは受信側で適切に破棄）
	・輻輳制御（混雑回避）
制御に時間がかかり、UDPより転送が遅いが、一つずつパケットが届いているか確認するので信頼性はUDPより高い。


+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|1|2|2|2|2|2|2|2|2|2|2|3|3|
|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| SPORT                         | DPORT                         | 
+-------------------------------+-------------------------------+ 
| SEQ_NUM                                                       | 
+---------------------------------------------------------------+ 
| ACK_NUM                                                       |
+-------+-----------------------+-------------------------------+
| HLEN  |  TCP_FLAGS            | CWND                          |
+-------+-----------------------+-------------------------------+
| CHKSUM                        | URG_POINTER                   |
+-------------------------------+-------------------------------+
// OPTION                                                      //
+===============================+===============================+
// DATA                                                        //
+---------------------------------------------------------------+
SPORT:		送信元ポート番号
DPORT:		送信先ポート番号
SEQ_NUM:	シーケンス番号
ACK_NUM:	確認応答番号
HLEN:	ヘッダ長(行) 1行4バイト
TCP_FLAGS: 制御用bitの集まり
+---+---+---+---+---+---+---+---+---+---+---+---+
|  0|  0|  0| NS|CWR|ECE|URG|ACK|PSH|RST|SYN|FIN|
+---+---+---+---+---+---+---+---+---+---+---+---+
代表的なFLAG
	URG:	緊急フラグ　緊急ポインタフィールドを使うよう指示
	ACK:	応答確認フラグ　このセグメントは応答確認を所持している。
	PSH:	転送強制フラグ受信可能になったらすぐ送信することを指示
	RST:	リセットフラグ　正しくないパケットを受け取った時の通信リセット指示
	SYN:	同期フラグ　先頭シーケンス番号の転送
	FIN:	転送終了フラグ　送信終了を意味する。受信は可能。
CWND:		ウィンドウサイズ
OPTION		オプション　可変長のデータ領域である。ヘッダの一部である。
		オプション長はHLEN-5（行）
DATA		上位層プロトコルのメッセージが入る。
DATAの長さは IPのPLEN、HLEN, TCP のHLENから逆算する。
ポート番号はUDPの時と同じで上位層プロトコル識別子

参考文献
[9] Wikipedia TCP https://ja.wikipedia.org/wiki/Transmission_Control_Protocol

################################
# Domain Name System (DNS)[10]
################################
TCPIP参照モデル第四層のプロトコルの一つ
ドメイン名サービスのために用いられる。

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|0|0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|1|2|2|2|2|2|2|2|2|2|2|3|3|
|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| id                            | flags                         |
+-------------------------------+-------------------------------+
| query count                   | answer count                  |
+-------------------------------+-------------------------------+
| authority count               | additional count              |
+-------------------------------+-------------------------------+
// query recodes                                               //
+---------------------------------------------------------------+
// answer recodes                                              //
+---------------------------------------------------------------+
// authority recodes                                           //
+---------------------------------------------------------------+
// additional recodes                                          //
+---------------------------------------------------------------+

query: DNS要求
response: DNS応答

id:	query と response を対応付けるための番号
flags:	命令やステータスを表すフラグ領域
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|qr| opcode    |aa|tc|rd|ra| 0| 0| 0| rcode     | 
+--+-----------+--+--+--+--+--+--+--+-----------+
※ qr,aa,tc,rd,ra ビットは 1 のときdigのflags: の直後にそのフィールド名が列挙される。
※ opcodeの値は digのopcode: の直後に書かれる。
※ rcodeの値は digのstatus: の直後に書かれる。
qr:	query のとき 0, response のとき 1
opcode: qr=0 のときにquery の種類を特定する
	代表的なopcode
	0000: Query 正引き（ドメイン名に対応するIPアドレスを問う）
	0001: IQuery (Inverse Query) 逆引き（IPアドレスに対応するドメイン名を問う）
	0010: Status ステータス照会（サーバの状態を問う）
	0100: Notify マスターからスレーブへゾーン情報変更通知。
	0101: Update DDNSのアップデート
	qr=1 (response) のときは 0000: Query
rcode: statusのこと qr=1 のときに使う。qr=0 のときは 0000（２進数）
	代表的なRCODE
	0000: NoError エラーなし
 	0001: FormErr フォーマットエラー
 	0010: ServFail サーバの問題
 	0011: NXDomain query のドメイン名の問題
	0100: NotImp	OPCODEに対応する処理が未実装
	0101: Refused	Query拒否
	0110: YXDomain	ドメイン名は存在するが拒否
	0111: YXRRSet	リソースレコードは存在するが拒否
	1000: NXRRSet	このリソースレコードは存在するべきではない
	1001: NotAuth	認証されていない
※ドメイン名が見つからない場合は0011=NXDomainを使う。
　digの結果がStatus NXDomainのときは、dig の引数がおかしい。
　例： URLが http://www.hogehoge.com/test/index.html だったとすると
　正 dig www.hogehoge.com
　誤 dig http://www.hogehoge.com/test/index.html
　誤 dig www.hogehoge.com/
query count:	QUESTION SECTION のレコード数
answer count:	ANSWER SECTION のレコード数
authority count:	AUTHORITY SECTIONのレコード数
additional count:	ADDITIONAL SECTIONのレコード数
※　レコードは各セクションの1行に対応する。

recodes: 	各セクション(QD,AN,NS,AD)のレコードが書かれる場所
		レコードはQueryセクションとそれ以外のセクションでフォーマットが違い、
		対応するCOUNT数だけそのレコードがある。レコードは可変長。

query recodes:	このレコードはqueryとresponseの両方で使う。
		response のときは問い合わせ内容が書かれ、
		この問い合わせに対する応答がanswer recodes に書かれる。
		レコード毎に以下のフォーマットで書かれる。
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
// QNAME                                       //
+--+-----------+--+--+--+--+--+--+--+-----------+
| QTYPE                                         |
+-----------------------------------------------+
| QCLASS                                        |
+-----------------------------------------------+
QNAME: 		問い合わせドメイン名 可変長データであるがこのフィールドのサイズは明記されない。
		ドメイン名の表現方法は、文字数、文字数に応じたアスキー文字の繰り返しとする。
		区切り文字のピリオドは含まれない。文字数が0のところで終わり。
		www.hogehoge.com= 3www8hogehoge3com0= 0x0377777708686f6765686f676503636f6d00
QTYPE:	レコードの種類を示す。
	A:	0x0001
	NS:	0x0002
	CNAME:	0x0005
	SOA:	0x0006
	PTR:	0x000c
	MX:	0x000f
	TXT:	0x0010
	AAAA:	0x001c
	コレ以外は参考文献[12]を参照のこと
QCLASS: queryクラスは、ネットワークシステムを特定する。
	INクラスはインターネット(ip)を意味する。
	IN:	0x0001
	コレ以外は参考文献[12]を参照のこと

answer, authority and additional recodes:
以下のフォーマットはレコード一つ分。
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
// NAME                                        //
+-----------------------------------------------+
| TYPE                                          |
+-----------------------------------------------+
| CLASS                                         |
+-----------------------------------------------+
| TTL                                           | ２行（32bit, 4byte）
|                                               |
+-----------------------------------------------+
| RDLEN                                         |
+-----------------------------------------------+
// RDATA                                       //
+-----------------------------------------------+
NAME:	QNAME と同様
TYPE:	QTYPEと同様
	A:	0x0001
	NS:	0x0002
	CNAME:	0x0005
	SOA:	0x0006
	PTR:	0x000c
	MX:	0x000f
	TXT:	0x0010
	AAAA:	0x001c
CLASS:	QCLASSと同様
	IN:	0x0001
TTL: 	キャッシュ寿命（秒）4byteの情報なので8桁の16進数
	例：16秒なら0x00000010秒
RDLEN: RDATA長 [bytes]　2バイトの情報。値が4のとき0x0004
RDATA: TYPE に応じた回答
TYPE=Aレコードの場合はIPアドレスを16進数で
TYPE=CNAMEやPTR、NSならNAMEと同じ要領で書かれたドメイン名
TYPE=MXレコードの場合は
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
| PREFERENCE                                    |
+-----------------------------------------------+
// EXCHANGE                                    //
+-----------------------------------------------+
PREFERENCE: MXレコードの優先順位
EXCHANGE: メールサーバドメイン名（QNAMEと同じ要領でかく）
TYPE=SOAの場合は自分で調査してください。
TYPE=AAAAの場合は、ipv6のIPアドレス（16バイト）。
ipv6のIPアドレスはfe53:8386:521a:0040::01 のように16進数で書きます。
区切りは2バイトずつでコロンで区切ります。各セクションで必ず2バイトなので
例の最後のように:01は:0001 の意味になります。
また::は途中が全部0000であることを意味します。
fe53:8386:521a:0040:0000:0000:0000:0001
であるように全部で16バイト、2バイトずつの区切りであるように省略された00を追加します。

圧縮について

NAMEのところは何度も同じ文字列が出てくるので、同じ文字列のところは、
文字数の代わりに、
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
| 1| 1| OFFSET                                  |
+--+--+-----------------------------------------+
で過去に現れた文字列を流用する。
OFFSET: DNSメッセージ（ヘッダ含む）の先頭バイトから数えて何バイト目かを表すポインタ。
OFFSET=0x0000はDNSメッセージの１バイト目を表す。
OFFSET=0x000cはDNSメッセージの１３バイト目を表す。
例：
0x037777770a6e61676173616b692d75026163026a7000= www.nagasaki-u.ac.jp
OFFSET=12バイト目から始まっているとする。
その下の方でwww.cis.nagasaki-u.ac.jp を書く必要が出てきたら、
0x03777777036369730a6e61676173616b692d75026163026a7000
と書くと長すぎるのでnagasaki-u.ac.jp.の部分を流用する。
03777777の4バイトも読み飛ばすので、
OFFSET=12+4=0x0010であるから、
圧縮コード0xc000と足しあわせて0xc010がnagasaki-u.ac.jp.のデータが書かれている場所を参照せよという意味になる。
0x0377777703636973c010
として、省略する。
翻訳するときは
文字数を調べる時に、0xc0以上なら圧縮、0xc0未満なら文字数として考えれば良い。
0x0377777703636973c00cのとき
0x03は0xc0未満なので文字数 3文字
0x777777 www
0x03は0xc0未満なので文字数 3文字
0xc0は0xc0以上なので圧縮
    読み込んだ1バイトから0xc0を引く。0x00
    新たに1バイト 0x10 を読み込んで先の結果0x00 と結合 0x0010=16
    DNSメッセージを先頭からOFFSETだけ読み飛ばす。0x0a6e61676173616b692d75026163026a7000
    翻訳ルーチンを再帰する。
    

[10] DNS overview, Fundamentals of Computer Networking  http://www.ccs.neu.edu/home/amislove/teaching/cs4700/fall09/handouts/project1-primer.pdf
(/home/mother/htakada/jikken1/network/DNS.pdf)
[12] IANA DNS Parameters http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml

########################################
Hyper Text Transfer Protocol (HTTP)[11]
########################################
TCPIP参照モデル第四層のプロトコルの一つ。WWWサービス。
HTTPリクエストとHTTPレスポンスがある。

ヘッダフィールド
ボディフィールド
の構成となっていて、ヘッダとボディは一行の空白改行で句切られる。
改行で一行。

ヘッダフィールドは
一行目がHTTPのメッセージ
それ以降の行は
フィールド名：値
の形式で一行ずつ書かれ、主にアスキーコードで書かれている。

HTTPのメッセージはリクエストとレスポンスで異なる
リクエストの場合

メソッド名 URI HTTPバージョン
例
GET / HTTP/1.0
の場合メソッドはGET, URI は /, HTTPバージョンは HTTP/1.0
である。
http://www.cis.nagasaki-u.ac.jp/course/students/ugradstu.html
へアクセスするときは、
GET /course/students/ugradstu.html HTTP/1.0
とかかれたメッセージが送られる。

レスポンスの場合

HTTPバージョン ステータスコード　メッセージ
例
HTTP/1.0 200 OK
の場合バージョンはHTTP/1.0 ステータスコードは200 メッセージはOK
である。


ヘッダフィールド名は多岐に渡るので省略する。
興味がある人は検索して調べよう。

ボディフィールドはhtmlソースがおかれる。
ただし、転送要領を減らすために gzip などで
圧縮されたりして送られることがあるので
キャプチャされた情報そのものはhtmlソースと一致しないことがある。
圧縮を解凍した結果がhtmlソースになっている。

参考文献
[11] Wikipedia HTTP https://ja.wikipedia.org/wiki/Hypertext_Transfer_Protocol

###############
ASCII CODE[12]
###############
制御用コード
0x00	NUL	[重要] Null文字
0x01	SOH	ヘッディング開始
0x02	STX	テキスト開始
0x03	ETX	テキスト終了
0x04	EOT	伝送終了
0x05	ENQ	問合せ
0x06	ACK	肯定応答
0x07	BEL	ベル
0x08	BS	[重要] 後退
0x09	HT	[重要] 水平タブ
0x0A	LF	[重要] 改行
0x0B	VT	垂直タブ
0x0C	FF	書式送り
0x0D	CR	[重要] 復帰
0x0E	SO	シフトアウト
0x0F	SI	シフトイン
0x10	DLE	伝送制御拡張
0x11	DC1	装置制御1,XON
0x12	DC2	装置制御2
0x13	DC3	装置制御3,XOFF
0x14	DC4	装置制御4
0x15	NAK	否定応答
0x16	SYN	同期信号
0x17	ETB	伝送ブロック終結
0x18	CAN	取消
0x19	EM	媒体終端
0x1A	SUB	置換
0x1B	ESC	[重要] エスケープ
0x1C	FS	ファイル分離標識
0x1D	GS	グループ分離標識
0x1E	RS	レコード分離標識
0x1F	US	ユニット分離標識
0x7F	DEL	[重要] 抹消

印字可能文字
 
0x20	半角空白
0x21	!
0x22	"
0x23	#
0x24	$
0x25	%
0x26	&
0x27	'
0x28	(
0x29	)
0x2A	*
0x2B	+
0x2C	,
0x2D	-
0x2E	.
0x2F	/
0x30	0
0x31	1
0x32	2
0x33	3
0x34	4
0x35	5
0x36	6
0x37	7
0x38	8
0x39	9
0x3A	:
0x3B	;
0x3C	<
0x3D	=
0x3E	>
0x3F	?
0x40	@
0x41	A
0x42	B
0x43	C
0x44	D
0x45	E
0x46	F
0x47	G
0x48	H
0x49	I
0x4A	J
0x4B	K
0x4C	L
0x4D	M
0x4E	N
0x4F	O
0x50	P
0x51	Q
0x52	R
0x53	S
0x54	T
0x55	U
0x56	V
0x57	W
0x58	X
0x59	Y
0x5A	Z
0x5B	[
0x5C	\ (backslash)
0x5D	]
0x5E	^
0x5F	_
0x61	a
0x62	b
0x63	c
0x64	d
0x65	e
0x66	f
0x67	g
0x68	h
0x69	i
0x6A	j
0x6B	k
0x6C	l
0x6D	m
0x6E	n
0x6F	o
0x70	p
0x71	q
0x72	r
0x73	s
0x74	t
0x75	u
0x76	v
0x77	w
0x78	x
0x79	y
0x7A	z
0x7B	{
0x7C	|
0x7D	}
0x7E	~

参考文献
[12] Wikipedia ASCII CODE https://ja.wikipedia.org/wiki/ASCII